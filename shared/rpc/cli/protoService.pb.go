// Code generated by protoc-gen-go.
// source: rpc/cli/protoService.proto
// DO NOT EDIT!

/*
Package rpc is a generated protocol buffer package.

It is generated from these files:
	rpc/cli/protoService.proto

It has these top-level messages:
	ResponseMessage
	Project
	Scenario
	TestCase
	Step
*/
package rpc

import proto "github.com/golang/protobuf/proto"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal

type ResponseMessage struct {
	Message string `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
}

func (m *ResponseMessage) Reset()         { *m = ResponseMessage{} }
func (m *ResponseMessage) String() string { return proto.CompactTextString(m) }
func (*ResponseMessage) ProtoMessage()    {}

type Project struct {
	Name      string      `protobuf:"bytes,1,opt" json:"Name,omitempty"`
	Scenarios []*Scenario `protobuf:"bytes,2,rep" json:"Scenarios,omitempty"`
}

func (m *Project) Reset()         { *m = Project{} }
func (m *Project) String() string { return proto.CompactTextString(m) }
func (*Project) ProtoMessage()    {}

func (m *Project) GetScenarios() []*Scenario {
	if m != nil {
		return m.Scenarios
	}
	return nil
}

type Scenario struct {
	Name  string      `protobuf:"bytes,1,opt" json:"Name,omitempty"`
	Cases []*TestCase `protobuf:"bytes,2,rep" json:"Cases,omitempty"`
}

func (m *Scenario) Reset()         { *m = Scenario{} }
func (m *Scenario) String() string { return proto.CompactTextString(m) }
func (*Scenario) ProtoMessage()    {}

func (m *Scenario) GetCases() []*TestCase {
	if m != nil {
		return m.Cases
	}
	return nil
}

type TestCase struct {
	Name  string  `protobuf:"bytes,1,opt" json:"Name,omitempty"`
	Steps []*Step `protobuf:"bytes,2,rep" json:"Steps,omitempty"`
}

func (m *TestCase) Reset()         { *m = TestCase{} }
func (m *TestCase) String() string { return proto.CompactTextString(m) }
func (*TestCase) ProtoMessage()    {}

func (m *TestCase) GetSteps() []*Step {
	if m != nil {
		return m.Steps
	}
	return nil
}

type Step struct {
	Type       string            `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
	Parameters map[string]string `protobuf:"bytes,2,rep,name=parameters" json:"parameters,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	SubSteps   []*Step           `protobuf:"bytes,3,rep,name=subSteps" json:"subSteps,omitempty"`
}

func (m *Step) Reset()         { *m = Step{} }
func (m *Step) String() string { return proto.CompactTextString(m) }
func (*Step) ProtoMessage()    {}

func (m *Step) GetParameters() map[string]string {
	if m != nil {
		return m.Parameters
	}
	return nil
}

func (m *Step) GetSubSteps() []*Step {
	if m != nil {
		return m.SubSteps
	}
	return nil
}

func init() {
	proto.RegisterType((*Project)(nil), "proto_service.Project")
	proto.RegisterType((*Scenario)(nil), "proto_service.Scenario")
	proto.RegisterType((*TestCase)(nil), "proto_service.TestCase")
	proto.RegisterType((*Step)(nil), "proto_service.Step")
	proto.RegisterType((*ResponseMessage)(nil), "proto_service.ResponseMessage")
}

// Client API for ProtoService service

type ProtoServiceClient interface {
	SendConfig(ctx context.Context, in *Project, opts ...grpc.CallOption) (*ResponseMessage, error)
}

type protoServiceClient struct {
	cc *grpc.ClientConn
}

func NewProtoServiceClient(cc *grpc.ClientConn) ProtoServiceClient {
	return &protoServiceClient{cc}
}

func (c *protoServiceClient) SendConfig(ctx context.Context, in *Project, opts ...grpc.CallOption) (*ResponseMessage, error) {
	out := new(ResponseMessage)
	err := grpc.Invoke(ctx, "/rpc.ProtoService/SendConfig", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ProtoService service

type ProtoServiceServer interface {
	SendConfig(context.Context, *Project) (*ResponseMessage, error)
}

func RegisterProtoServiceServer(s *grpc.Server, srv ProtoServiceServer) {
	s.RegisterService(&_ProtoService_serviceDesc, srv)
}

func _ProtoService_SendConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Project)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProtoServiceServer).SendConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.ProtoService/SendConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProtoServiceServer).SendConfig(ctx, req.(*Project))
	}
	return interceptor(ctx, in, info, handler)
}

var _ProtoService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.ProtoService",
	HandlerType: (*ProtoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendConfig",
			Handler:    _ProtoService_SendConfig_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}
